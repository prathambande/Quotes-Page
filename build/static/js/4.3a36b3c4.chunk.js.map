{"version":3,"sources":["hooks/use-http.js","lib/api.js","components/quotes/HighlightedQuote.js","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","pages/QuoteDetail.js"],"names":["httpReducer","state","action","type","data","error","status","responseData","errorMessage","useHttp","requestFunction","startWithPending","useReducer","httpState","dispatch","sendRequest","useCallback","requestData","a","message","FIREBASE_DOMAIN","getAllQuotes","fetch","response","json","ok","Error","key","transformedQuotes","quoteObj","id","push","getSingleQuote","quoteId","loadedQuote","addQuote","quoteData","method","body","JSON","stringify","headers","addComment","commentData","commentId","name","getAllComments","transformedComments","commentObj","HighlightedQuote","props","className","classes","quote","text","author","module","exports","CommentItem","item","CommentsList","console","log","comments","map","comment","NewCommentForm","commentTextRef","useRef","useEffect","onAddedComment","submitFormHandler","event","preventDefault","enteredText","current","value","form","onSubmit","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","LoadingSpinner","length","onClick","QuoteDetail","useParams","match","useRouteMatch","path","exact","to","url"],"mappings":"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","file":"static/js/4.3a36b3c4.chunk.js","sourcesContent":["import { useReducer, useCallback } from 'react';\n\nfunction httpReducer(state, action) {\n  if (action.type === 'SEND') {\n    return {\n      data: null,\n      error: null,\n      status: 'pending',\n    };\n  }\n\n  if (action.type === 'SUCCESS') {\n    return {\n      data: action.responseData,\n      error: null,\n      status: 'completed',\n    };\n  }\n\n  if (action.type === 'ERROR') {\n    return {\n      data: null,\n      error: action.errorMessage,\n      status: 'completed',\n    };\n  }\n\n  return state;\n}\n\nfunction useHttp(requestFunction, startWithPending = false) {\n  const [httpState, dispatch] = useReducer(httpReducer, {\n    status: startWithPending ? 'pending' : null,\n    data: null,\n    error: null,\n  });\n\n  const sendRequest = useCallback(\n    async function (requestData) {\n      dispatch({ type: 'SEND' });\n      try {\n        const responseData = await requestFunction(requestData);\n        dispatch({ type: 'SUCCESS', responseData });\n      } catch (error) {\n        dispatch({\n          type: 'ERROR',\n          errorMessage: error.message || 'Something went wrong!',\n        });\n      }\n    },\n    [requestFunction]\n  );\n\n  return {\n    sendRequest,\n    ...httpState,\n  };\n}\n\nexport default useHttp;\n","const FIREBASE_DOMAIN = 'https://react-movies-2fa11-default-rtdb.asia-southeast1.firebasedatabase.app';\n\nexport async function getAllQuotes() {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quotes.');\n  }\n\n  const transformedQuotes = [];\n\n  for (const key in data) {\n    const quoteObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedQuotes.push(quoteObj);\n  }\n\n  return transformedQuotes;\n}\n\nexport async function getSingleQuote(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes/${quoteId}.json`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not fetch quote.');\n  }\n\n  const loadedQuote = {\n    id: quoteId,\n    ...data,\n  };\n\n  return loadedQuote;\n}\n\nexport async function addQuote(quoteData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/quotes.json`, {\n    method: 'POST',\n    body: JSON.stringify(quoteData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not create quote.');\n  }\n\n  return null;\n}\n\nexport async function addComment(requestData) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${requestData.quoteId}.json`, {\n    method: 'POST',\n    body: JSON.stringify(requestData.commentData),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not add comment.');\n  }\n\n  return { commentId: data.name };\n}\n\nexport async function getAllComments(quoteId) {\n  const response = await fetch(`${FIREBASE_DOMAIN}/comments/${quoteId}.json`);\n\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error(data.message || 'Could not get comments.');\n  }\n\n  const transformedComments = [];\n\n  for (const key in data) {\n    const commentObj = {\n      id: key,\n      ...data[key],\n    };\n\n    transformedComments.push(commentObj);\n  }\n\n  return transformedComments;\n}\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2EkuY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3NB7B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__3YYu5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3HjXj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3ARiU\",\"loading\":\"NewCommentForm_loading__3be6K\",\"control\":\"NewCommentForm_control__15cPI\",\"actions\":\"NewCommentForm_actions__z_Tn2\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  console.log(props);\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useRef } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  useEffect(() => {\n    if(status === 'completed' && !error){\n      props.onAddedComment();\n    }\n  }, [status, props.onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n    const enteredText = commentTextRef.current.value;\n    //sendRequest({commentData: enteredText, quoteId: props.id});\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.id });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useEffect, useState } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\n\nconst Comments = (props) => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const {sendRequest, data, status, error} = useHttp(getAllComments, true);\n\n\n  useEffect(() => { \n    sendRequest(props.quoteId);\n  }, [props.quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  \n  const onAddedComment = useCallback(() => {\n    sendRequest(props.quoteId);\n  }, [sendRequest, props.quoteId]);\n\n  var comments;\n\n  if(status === 'pending'){\n    comments = <div className='centered'><LoadingSpinner/></div>\n  }\n\n  if(error){\n    comments = <p>Error</p>\n  }\n\n  if(status === 'completed' && data){\n    console.log(data);\n    comments = <CommentsList comments={data} />\n    if(data.length === 0){\n      comments = <p>No Comments</p>\n    }\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm id={props.quoteId} onAddedComment={onAddedComment}/>}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from \"react\";\r\nimport { Link, Route } from \"react-router-dom\";\r\nimport { useParams, useRouteMatch } from \"react-router-dom/cjs/react-router-dom.min\";\r\nimport Comments from '../components/comments/Comments'\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\n// const dummy_quotes = [\r\n//     {id:'q1', author:'Pratham', text: 'SELF'},\r\n//     {id:'q2', author:'Pratham', text: 'SELF SELF SELF'}\r\n// ]\r\n\r\nconst QuoteDetail = () => {\r\n    const params = useParams();\r\n    const quoteId = params.quoteId;\r\n    //const {quoteId} = params;\r\n    const match = useRouteMatch();\r\n    //const quote = dummy_quotes.find(quote => quote.id === params.quoteId)\r\n\r\n    const { sendRequest, status, data, error} = useHttp(getSingleQuote, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId)\r\n    }, [sendRequest, quoteId])\r\n\r\n    //console.log(match);\r\n\r\n    if(status === 'pending'){\r\n        return <div className=\"centered\"><LoadingSpinner/></div>\r\n    }\r\n\r\n    if(error){\r\n        return <p className=\"centered\" >{error}</p>\r\n    }\r\n\r\n    if(!data.text){\r\n        return(\r\n            <HighlightedQuote text=\"404 Not Quotes like these\" author=\"DEVS\" />\r\n        )\r\n    }\r\n\r\n    return (\r\n    <Fragment>\r\n        <h1>Quote Detail</h1>\r\n        <HighlightedQuote text={data.text} author={data.author} />\r\n        <Route path={`${match.path}`} exact>\r\n            <div className=\"centered\">\r\n                <Link className='btn--flat' to={`${match.url}/comments`}>\r\n                    Load Comments\r\n                </Link>\r\n            </div>\r\n        </Route>\r\n        <Route path={`${match.path}/comments`}>\r\n            <Comments quoteId={quoteId}/>\r\n        </Route>\r\n    </Fragment>\r\n    )\r\n}\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}